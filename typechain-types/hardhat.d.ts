/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "EthereumConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumConfig__factory>;
    getContractFactory(
      name: "SepoliaConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SepoliaConfig__factory>;
    getContractFactory(
      name: "FHE",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FHE__factory>;
    getContractFactory(
      name: "IDecryptionOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDecryptionOracle__factory>;
    getContractFactory(
      name: "IKMSVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKMSVerifier__factory>;
    getContractFactory(
      name: "IACL",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IACL__factory>;
    getContractFactory(
      name: "IFHEVMExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFHEVMExecutor__factory>;
    getContractFactory(
      name: "IInputVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInputVerifier__factory>;
    getContractFactory(
      name: "AnonymousPropertyVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AnonymousPropertyVoting__factory>;
    getContractFactory(
      name: "AnonymousPropertyVotingFixed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AnonymousPropertyVotingFixed__factory>;
    getContractFactory(
      name: "AnonymousPropertyVotingV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AnonymousPropertyVotingV2__factory>;
    getContractFactory(
      name: "IGatewayV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGatewayV2__factory>;
    getContractFactory(
      name: "AnonymousPropertyVotingV2Fixed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AnonymousPropertyVotingV2Fixed__factory>;
    getContractFactory(
      name: "IGatewayV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGatewayV2__factory>;
    getContractFactory(
      name: "AnonymousPropertyVotingV2FixedLite",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AnonymousPropertyVotingV2FixedLite__factory>;
    getContractFactory(
      name: "IGatewayV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGatewayV2__factory>;
    getContractFactory(
      name: "DoSProtection",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DoSProtection__factory>;
    getContractFactory(
      name: "GasOptimized",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasOptimized__factory>;
    getContractFactory(
      name: "StorageOptimizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StorageOptimizer__factory>;

    getContractAt(
      name: "EthereumConfig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumConfig>;
    getContractAt(
      name: "SepoliaConfig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SepoliaConfig>;
    getContractAt(
      name: "FHE",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FHE>;
    getContractAt(
      name: "IDecryptionOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDecryptionOracle>;
    getContractAt(
      name: "IKMSVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKMSVerifier>;
    getContractAt(
      name: "IACL",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IACL>;
    getContractAt(
      name: "IFHEVMExecutor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFHEVMExecutor>;
    getContractAt(
      name: "IInputVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInputVerifier>;
    getContractAt(
      name: "AnonymousPropertyVoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AnonymousPropertyVoting>;
    getContractAt(
      name: "AnonymousPropertyVotingFixed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AnonymousPropertyVotingFixed>;
    getContractAt(
      name: "AnonymousPropertyVotingV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AnonymousPropertyVotingV2>;
    getContractAt(
      name: "IGatewayV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGatewayV2>;
    getContractAt(
      name: "AnonymousPropertyVotingV2Fixed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AnonymousPropertyVotingV2Fixed>;
    getContractAt(
      name: "IGatewayV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGatewayV2>;
    getContractAt(
      name: "AnonymousPropertyVotingV2FixedLite",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AnonymousPropertyVotingV2FixedLite>;
    getContractAt(
      name: "IGatewayV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGatewayV2>;
    getContractAt(
      name: "DoSProtection",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DoSProtection>;
    getContractAt(
      name: "GasOptimized",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GasOptimized>;
    getContractAt(
      name: "StorageOptimizer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StorageOptimizer>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
