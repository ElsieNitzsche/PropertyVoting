/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface AnonymousPropertyVotingV2FixedLiteInterface
  extends utils.Interface {
  functions: {
    "createProposal(string,uint256)": FunctionFragment;
    "currentProposal()": FunctionFragment;
    "endProposal(uint16)": FunctionFragment;
    "forceCloseProposal(uint16)": FunctionFragment;
    "gateway()": FunctionFragment;
    "getCurrentProposalInfo()": FunctionFragment;
    "getProposalResults(uint16)": FunctionFragment;
    "getResidentStatus(address)": FunctionFragment;
    "getVersionInfo()": FunctionFragment;
    "getVotingTimeLeft(uint16)": FunctionFragment;
    "isVotingActive(uint16)": FunctionFragment;
    "processVoteResults(uint256,uint8[],bytes[])": FunctionFragment;
    "propertyManager()": FunctionFragment;
    "proposalVotes(uint16,address)": FunctionFragment;
    "proposals(uint16)": FunctionFragment;
    "protocolId()": FunctionFragment;
    "registerResident(uint8)": FunctionFragment;
    "residents(address)": FunctionFragment;
    "setGateway(address)": FunctionFragment;
    "submitVote(uint16,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createProposal"
      | "currentProposal"
      | "endProposal"
      | "forceCloseProposal"
      | "gateway"
      | "getCurrentProposalInfo"
      | "getProposalResults"
      | "getResidentStatus"
      | "getVersionInfo"
      | "getVotingTimeLeft"
      | "isVotingActive"
      | "processVoteResults"
      | "propertyManager"
      | "proposalVotes"
      | "proposals"
      | "protocolId"
      | "registerResident"
      | "residents"
      | "setGateway"
      | "submitVote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceCloseProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentProposalInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResidentStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingTimeLeft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVotingActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processVoteResults",
    values: [BigNumberish, BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "propertyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalVotes",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerResident",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "residents", values: [string]): string;
  encodeFunctionData(functionFragment: "setGateway", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceCloseProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentProposalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResidentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingTimeLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVotingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processVoteResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propertyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerResident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "residents", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGateway", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;

  events: {
    "DecryptionFulfilled(uint256)": EventFragment;
    "ProposalCreated(uint16,uint256)": EventFragment;
    "ProposalEnded(uint16,uint16,uint16)": EventFragment;
    "ProposalForceClosed(uint16)": EventFragment;
    "ResidentRegistered(address)": EventFragment;
    "VoteSubmitted(address,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DecryptionFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalForceClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResidentRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteSubmitted"): EventFragment;
}

export interface DecryptionFulfilledEventObject {
  requestID: BigNumber;
}
export type DecryptionFulfilledEvent = TypedEvent<
  [BigNumber],
  DecryptionFulfilledEventObject
>;

export type DecryptionFulfilledEventFilter =
  TypedEventFilter<DecryptionFulfilledEvent>;

export interface ProposalCreatedEventObject {
  proposalId: number;
  endTime: BigNumber;
}
export type ProposalCreatedEvent = TypedEvent<
  [number, BigNumber],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalEndedEventObject {
  proposalId: number;
  yesVotes: number;
  noVotes: number;
}
export type ProposalEndedEvent = TypedEvent<
  [number, number, number],
  ProposalEndedEventObject
>;

export type ProposalEndedEventFilter = TypedEventFilter<ProposalEndedEvent>;

export interface ProposalForceClosedEventObject {
  proposalId: number;
}
export type ProposalForceClosedEvent = TypedEvent<
  [number],
  ProposalForceClosedEventObject
>;

export type ProposalForceClosedEventFilter =
  TypedEventFilter<ProposalForceClosedEvent>;

export interface ResidentRegisteredEventObject {
  resident: string;
}
export type ResidentRegisteredEvent = TypedEvent<
  [string],
  ResidentRegisteredEventObject
>;

export type ResidentRegisteredEventFilter =
  TypedEventFilter<ResidentRegisteredEvent>;

export interface VoteSubmittedEventObject {
  voter: string;
  proposalId: number;
}
export type VoteSubmittedEvent = TypedEvent<
  [string, number],
  VoteSubmittedEventObject
>;

export type VoteSubmittedEventFilter = TypedEventFilter<VoteSubmittedEvent>;

export interface AnonymousPropertyVotingV2FixedLite extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AnonymousPropertyVotingV2FixedLiteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createProposal(
      title: string,
      votingDurationHours: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    currentProposal(overrides?: CallOverrides): Promise<[number]>;

    endProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceCloseProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    gateway(overrides?: CallOverrides): Promise<[string]>;

    getCurrentProposalInfo(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, boolean, BigNumber, BigNumber, number] & {
        proposalId: number;
        title: string;
        description: string;
        isActive: boolean;
        startTime: BigNumber;
        endTime: BigNumber;
        totalVotes: number;
      }
    >;

    getProposalResults(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, number, boolean] & {
        resultsRevealed: boolean;
        totalVotes: number;
        yesVotes: number;
        noVotes: number;
        approved: boolean;
      }
    >;

    getResidentStatus(
      resident: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isRegistered: boolean;
        registrationTime: BigNumber;
        hasVotedCurrentProposal: boolean;
      }
    >;

    getVersionInfo(
      overrides?: CallOverrides
    ): Promise<[string, string] & { version: string; features: string }>;

    getVotingTimeLeft(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isVotingActive(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    processVoteResults(
      requestId: BigNumberish,
      decryptedVotes: BigNumberish[],
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    propertyManager(overrides?: CallOverrides): Promise<[string]>;

    proposalVotes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { vote: string; submitted: boolean }>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, number, number, number, boolean] & {
        title: string;
        isActive: boolean;
        endTime: BigNumber;
        totalVotes: number;
        yesVotes: number;
        noVotes: number;
        resultsRevealed: boolean;
      }
    >;

    protocolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerResident(
      unitNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    residents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { isRegistered: boolean; encryptedUnit: string }
    >;

    setGateway(
      _newGateway: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitVote(
      proposalId: BigNumberish,
      voteChoice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  createProposal(
    title: string,
    votingDurationHours: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  currentProposal(overrides?: CallOverrides): Promise<number>;

  endProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceCloseProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  gateway(overrides?: CallOverrides): Promise<string>;

  getCurrentProposalInfo(
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, boolean, BigNumber, BigNumber, number] & {
      proposalId: number;
      title: string;
      description: string;
      isActive: boolean;
      startTime: BigNumber;
      endTime: BigNumber;
      totalVotes: number;
    }
  >;

  getProposalResults(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, number, number, boolean] & {
      resultsRevealed: boolean;
      totalVotes: number;
      yesVotes: number;
      noVotes: number;
      approved: boolean;
    }
  >;

  getResidentStatus(
    resident: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, boolean] & {
      isRegistered: boolean;
      registrationTime: BigNumber;
      hasVotedCurrentProposal: boolean;
    }
  >;

  getVersionInfo(
    overrides?: CallOverrides
  ): Promise<[string, string] & { version: string; features: string }>;

  getVotingTimeLeft(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isVotingActive(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  processVoteResults(
    requestId: BigNumberish,
    decryptedVotes: BigNumberish[],
    signatures: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  propertyManager(overrides?: CallOverrides): Promise<string>;

  proposalVotes(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { vote: string; submitted: boolean }>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, number, number, number, boolean] & {
      title: string;
      isActive: boolean;
      endTime: BigNumber;
      totalVotes: number;
      yesVotes: number;
      noVotes: number;
      resultsRevealed: boolean;
    }
  >;

  protocolId(overrides?: CallOverrides): Promise<BigNumber>;

  registerResident(
    unitNumber: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  residents(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { isRegistered: boolean; encryptedUnit: string }
  >;

  setGateway(
    _newGateway: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitVote(
    proposalId: BigNumberish,
    voteChoice: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    createProposal(
      title: string,
      votingDurationHours: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentProposal(overrides?: CallOverrides): Promise<number>;

    endProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceCloseProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    gateway(overrides?: CallOverrides): Promise<string>;

    getCurrentProposalInfo(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, boolean, BigNumber, BigNumber, number] & {
        proposalId: number;
        title: string;
        description: string;
        isActive: boolean;
        startTime: BigNumber;
        endTime: BigNumber;
        totalVotes: number;
      }
    >;

    getProposalResults(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, number, boolean] & {
        resultsRevealed: boolean;
        totalVotes: number;
        yesVotes: number;
        noVotes: number;
        approved: boolean;
      }
    >;

    getResidentStatus(
      resident: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isRegistered: boolean;
        registrationTime: BigNumber;
        hasVotedCurrentProposal: boolean;
      }
    >;

    getVersionInfo(
      overrides?: CallOverrides
    ): Promise<[string, string] & { version: string; features: string }>;

    getVotingTimeLeft(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVotingActive(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    processVoteResults(
      requestId: BigNumberish,
      decryptedVotes: BigNumberish[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    propertyManager(overrides?: CallOverrides): Promise<string>;

    proposalVotes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { vote: string; submitted: boolean }>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, number, number, number, boolean] & {
        title: string;
        isActive: boolean;
        endTime: BigNumber;
        totalVotes: number;
        yesVotes: number;
        noVotes: number;
        resultsRevealed: boolean;
      }
    >;

    protocolId(overrides?: CallOverrides): Promise<BigNumber>;

    registerResident(
      unitNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    residents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { isRegistered: boolean; encryptedUnit: string }
    >;

    setGateway(_newGateway: string, overrides?: CallOverrides): Promise<void>;

    submitVote(
      proposalId: BigNumberish,
      voteChoice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DecryptionFulfilled(uint256)"(
      requestID?: BigNumberish | null
    ): DecryptionFulfilledEventFilter;
    DecryptionFulfilled(
      requestID?: BigNumberish | null
    ): DecryptionFulfilledEventFilter;

    "ProposalCreated(uint16,uint256)"(
      proposalId?: BigNumberish | null,
      endTime?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposalId?: BigNumberish | null,
      endTime?: null
    ): ProposalCreatedEventFilter;

    "ProposalEnded(uint16,uint16,uint16)"(
      proposalId?: BigNumberish | null,
      yesVotes?: null,
      noVotes?: null
    ): ProposalEndedEventFilter;
    ProposalEnded(
      proposalId?: BigNumberish | null,
      yesVotes?: null,
      noVotes?: null
    ): ProposalEndedEventFilter;

    "ProposalForceClosed(uint16)"(
      proposalId?: BigNumberish | null
    ): ProposalForceClosedEventFilter;
    ProposalForceClosed(
      proposalId?: BigNumberish | null
    ): ProposalForceClosedEventFilter;

    "ResidentRegistered(address)"(
      resident?: string | null
    ): ResidentRegisteredEventFilter;
    ResidentRegistered(resident?: string | null): ResidentRegisteredEventFilter;

    "VoteSubmitted(address,uint16)"(
      voter?: string | null,
      proposalId?: BigNumberish | null
    ): VoteSubmittedEventFilter;
    VoteSubmitted(
      voter?: string | null,
      proposalId?: BigNumberish | null
    ): VoteSubmittedEventFilter;
  };

  estimateGas: {
    createProposal(
      title: string,
      votingDurationHours: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    currentProposal(overrides?: CallOverrides): Promise<BigNumber>;

    endProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceCloseProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    gateway(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentProposalInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalResults(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResidentStatus(
      resident: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getVotingTimeLeft(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVotingActive(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processVoteResults(
      requestId: BigNumberish,
      decryptedVotes: BigNumberish[],
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    propertyManager(overrides?: CallOverrides): Promise<BigNumber>;

    proposalVotes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolId(overrides?: CallOverrides): Promise<BigNumber>;

    registerResident(
      unitNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    residents(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setGateway(
      _newGateway: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitVote(
      proposalId: BigNumberish,
      voteChoice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createProposal(
      title: string,
      votingDurationHours: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    currentProposal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceCloseProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentProposalInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalResults(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResidentStatus(
      resident: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotingTimeLeft(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVotingActive(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processVoteResults(
      requestId: BigNumberish,
      decryptedVotes: BigNumberish[],
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    propertyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalVotes(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerResident(
      unitNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    residents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGateway(
      _newGateway: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitVote(
      proposalId: BigNumberish,
      voteChoice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
