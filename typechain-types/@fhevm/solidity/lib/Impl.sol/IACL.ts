/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface IACLInterface extends utils.Interface {
  functions: {
    "allow(bytes32,address)": FunctionFragment;
    "allowForDecryption(bytes32[])": FunctionFragment;
    "allowTransient(bytes32,address)": FunctionFragment;
    "cleanTransientStorage()": FunctionFragment;
    "isAllowed(bytes32,address)": FunctionFragment;
    "isAllowedForDecryption(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allow"
      | "allowForDecryption"
      | "allowTransient"
      | "cleanTransientStorage"
      | "isAllowed"
      | "isAllowedForDecryption"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allow",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowForDecryption",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowTransient",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanTransientStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedForDecryption",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "allow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowForDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowTransient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanTransientStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedForDecryption",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IACL extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IACLInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allow(
      handle: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowForDecryption(
      handlesList: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowTransient(
      ciphertext: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cleanTransientStorage(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isAllowed(
      handle: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAllowedForDecryption(
      handle: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  allow(
    handle: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowForDecryption(
    handlesList: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowTransient(
    ciphertext: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cleanTransientStorage(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isAllowed(
    handle: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAllowedForDecryption(
    handle: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    allow(
      handle: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowForDecryption(
      handlesList: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowTransient(
      ciphertext: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cleanTransientStorage(overrides?: CallOverrides): Promise<void>;

    isAllowed(
      handle: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllowedForDecryption(
      handle: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    allow(
      handle: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowForDecryption(
      handlesList: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowTransient(
      ciphertext: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cleanTransientStorage(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isAllowed(
      handle: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowedForDecryption(
      handle: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allow(
      handle: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowForDecryption(
      handlesList: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowTransient(
      ciphertext: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cleanTransientStorage(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isAllowed(
      handle: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedForDecryption(
      handle: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
