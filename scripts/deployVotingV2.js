const { ethers } = require("hardhat");
require("dotenv").config();

async function main() {
    console.log("========================================");
    console.log("AnonymousPropertyVotingV2 ÈÉ®ÁΩ≤ËÑöÊú¨");
    console.log("========================================\n");

    // Ëé∑ÂèñÈÉ®ÁΩ≤Ë¥¶Êà∑
    const [deployer] = await ethers.getSigners();
    console.log(`ÈÉ®ÁΩ≤Ë¥¶Êà∑: ${deployer.address}`);

    const balance = await deployer.getBalance();
    console.log(`Ë¥¶Êà∑‰ΩôÈ¢ù: ${ethers.utils.formatEther(balance)} ETH\n`);

    if (balance.eq(0)) {
        throw new Error("ÈÉ®ÁΩ≤Ë¥¶Êà∑‰ΩôÈ¢ù‰∏çË∂≥");
    }

    // ËØªÂèñÂèØÈÄâÁöÑÁΩëÂÖ≥Âú∞ÂùÄ
    const gatewayAddress = process.env.GATEWAY_CONTRACT_ADDRESS || ethers.constants.AddressZero;

    if (gatewayAddress === ethers.constants.AddressZero) {
        console.log("‚ö†Ô∏è  Êú™ÈÖçÁΩÆÁΩëÂÖ≥Âú∞ÂùÄ");
        console.log("ÈÉ®ÁΩ≤Ê®°Âºè: Êó†ÁΩëÂÖ≥Ê®°ÂºèÔºà‰∏éÂéüÁâàË°å‰∏∫ÂÆåÂÖ®Áõ∏ÂêåÔºâ\n");
    } else {
        console.log(`‚úÖ ÁΩëÂÖ≥Âú∞ÂùÄ: ${gatewayAddress}`);
        console.log("ÈÉ®ÁΩ≤Ê®°Âºè: ÁΩëÂÖ≥ÈõÜÊàêÊ®°ÂºèÔºàÈ¢ùÂ§ñÂÆâÂÖ®‰øùÊä§Ôºâ\n");

        // È™åËØÅÁΩëÂÖ≥ÂêàÁ∫¶
        const gatewayCode = await ethers.provider.getCode(gatewayAddress);
        if (gatewayCode === "0x" || gatewayCode === "0x0") {
            throw new Error("ÁΩëÂÖ≥Âú∞ÂùÄ‰∏äÊ≤°ÊúâÂêàÁ∫¶‰ª£Á†ÅÔºåËØ∑Ê£ÄÊü•Âú∞ÂùÄÊòØÂê¶Ê≠£Á°Æ");
        }
        console.log("‚úÖ ÁΩëÂÖ≥ÂêàÁ∫¶È™åËØÅÊàêÂäü\n");
    }

    // ÈÉ®ÁΩ≤ÊäïÁ•®ÂêàÁ∫¶
    console.log("ÂºÄÂßãÈÉ®ÁΩ≤ AnonymousPropertyVotingV2...");
    const VotingV2 = await ethers.getContractFactory("AnonymousPropertyVotingV2");

    const voting = await VotingV2.deploy(gatewayAddress);
    console.log(`‰∫§ÊòìÂ∑≤Êèê‰∫§: ${voting.deployTransaction.hash}`);

    await voting.deployed();
    console.log(`‚úÖ AnonymousPropertyVotingV2 Â∑≤ÈÉ®ÁΩ≤Âà∞: ${voting.address}\n`);

    // È™åËØÅÈÉ®ÁΩ≤
    console.log("È™åËØÅÂêàÁ∫¶ÈÉ®ÁΩ≤...");

    // È™åËØÅÁÆ°ÁêÜÂëò
    const propertyManager = await voting.propertyManager();
    console.log(`‚úÖ Ë¥¢‰∫ßÁÆ°ÁêÜÂëò: ${propertyManager}`);

    if (propertyManager.toLowerCase() !== deployer.address.toLowerCase()) {
        throw new Error("Ë¥¢‰∫ßÁÆ°ÁêÜÂëòÂú∞ÂùÄ‰∏çÂåπÈÖç");
    }

    // È™åËØÅÂΩìÂâçÊèêÊ°à ID
    const currentProposal = await voting.currentProposal();
    console.log(`‚úÖ ÂΩìÂâçÊèêÊ°à ID: ${currentProposal}`);

    if (Number(currentProposal) !== 1) {
        throw new Error("ÂàùÂßãÊèêÊ°à ID Â∫îËØ•‰∏∫ 1");
    }

    // È™åËØÅÁΩëÂÖ≥ÈÖçÁΩÆ
    const configuredGateway = await voting.gateway();
    console.log(`‚úÖ ÈÖçÁΩÆÁöÑÁΩëÂÖ≥: ${configuredGateway}`);

    if (configuredGateway.toLowerCase() !== gatewayAddress.toLowerCase()) {
        throw new Error("ÁΩëÂÖ≥Âú∞ÂùÄ‰∏çÂåπÈÖç");
    }

    // Ëé∑ÂèñÁâàÊú¨‰ø°ÊÅØ
    const [version, features] = await voting.getVersionInfo();
    console.log(`‚úÖ ÁâàÊú¨: ${version}`);
    console.log(`‚úÖ ÁâπÊÄß: ${features}\n`);

    // ÊµãËØïËß£ÂØÜÊùÉÈôêÊ£ÄÊü•ÔºàÂ¶ÇÊûúÈÖçÁΩÆ‰∫ÜÁΩëÂÖ≥Ôºâ
    if (gatewayAddress !== ethers.constants.AddressZero) {
        try {
            const isAllowed = await voting.isDecryptionAllowed();
            console.log(`‚úÖ Ëß£ÂØÜÊùÉÈôêÊ£ÄÊü•: ${isAllowed ? "ÂÖÅËÆ∏" : "‰∏çÂÖÅËÆ∏"}\n`);
        } catch (error) {
            console.log(`‚ö†Ô∏è  Ëß£ÂØÜÊùÉÈôêÊ£ÄÊü•Â§±Ë¥•: ${error.message}\n`);
        }
    }

    // È™åËØÅ FHE ÂäüËÉΩ
    console.log("È™åËØÅÊ†∏ÂøÉÂäüËÉΩÊé•Âè£...");

    const functionsToCheck = [
        "registerResident",
        "createProposal",
        "submitVote",
        "endProposal",
        "processVoteResults",
        "getCurrentProposalInfo",
        "getResidentStatus",
        "getProposalResults",
        "getTotalResidents",
        "getVotingTimeLeft",
        "isVotingActive"
    ];

    for (const func of functionsToCheck) {
        const exists = typeof voting[func] === "function";
        const status = exists ? "‚úÖ" : "‚ùå";
        console.log(`  ${status} ${func}`);

        if (!exists) {
            throw new Error(`Áº∫Â∞ëÂøÖË¶ÅÂáΩÊï∞: ${func}`);
        }
    }

    console.log("\nÊâÄÊúâÊ†∏ÂøÉÂäüËÉΩÈ™åËØÅÈÄöËøáÔºÅ\n");

    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    const deploymentInfo = {
        network: (await ethers.provider.getNetwork()).name,
        chainId: (await ethers.provider.getNetwork()).chainId,
        contract: "AnonymousPropertyVotingV2",
        address: voting.address,
        deployer: deployer.address,
        propertyManager: propertyManager,
        gatewayAddress: configuredGateway,
        deploymentMode: gatewayAddress === ethers.constants.AddressZero ? "standalone" : "gateway-integrated",
        deploymentHash: voting.deployTransaction.hash,
        blockNumber: voting.deployTransaction.blockNumber,
        timestamp: new Date().toISOString(),
        version: version,
        features: features,
        fheFunctions: {
            registerResident: "FHE.asEuint8 with auto re-randomization",
            submitVote: "FHE.asEuint8 with auto re-randomization",
            endProposal: "FHE.requestDecryption with gateway validation",
            processVoteResults: "FHE.checkSignatures"
        }
    };

    const fs = require("fs");
    const deploymentPath = "./deployment-voting-v2.json";
    fs.writeFileSync(
        deploymentPath,
        JSON.stringify(deploymentInfo, null, 2)
    );

    console.log(`ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞: ${deploymentPath}\n`);

    // ËæìÂá∫ÁéØÂ¢ÉÂèòÈáèÂª∫ËÆÆ
    console.log("========================================");
    console.log("ËØ∑Â∞Ü‰ª•‰∏ãÂú∞ÂùÄÊ∑ªÂä†Âà∞ .env Êñá‰ª∂:");
    console.log("========================================");
    console.log(`VOTING_CONTRACT_ADDRESS=${voting.address}`);
    console.log("========================================\n");

    // ËæìÂá∫ÂêàÁ∫¶È™åËØÅÂëΩ‰ª§
    const networkName = (await ethers.provider.getNetwork()).name;
    console.log("ÂêàÁ∫¶È™åËØÅÂëΩ‰ª§ (Etherscan):");
    console.log("========================================");
    console.log(`npx hardhat verify --network ${networkName} ${voting.address} ${gatewayAddress}`);
    console.log("========================================\n");

    // ËæìÂá∫‰ΩøÁî®ËØ¥Êòé
    console.log("üìã ‰ΩøÁî®ËØ¥Êòé:");
    console.log("========================================");
    console.log("1. Â±ÖÊ∞ëÊ≥®ÂÜå:");
    console.log(`   voting.registerResident(unitNumber)`);
    console.log("");
    console.log("2. ÂàõÂª∫ÊèêÊ°à (‰ªÖÁÆ°ÁêÜÂëò):");
    console.log(`   voting.createProposal(title, description, votingDurationHours)`);
    console.log("");
    console.log("3. Êèê‰∫§ÊäïÁ•®:");
    console.log(`   voting.submitVote(proposalId, voteChoice) // 0=ÂèçÂØπ, 1=ËµûÊàê`);
    console.log("");
    console.log("4. ÁªìÊùüÊèêÊ°à (‰ªÖÁÆ°ÁêÜÂëò):");
    console.log(`   voting.endProposal(proposalId)`);
    console.log("");
    console.log("5. Êü•ËØ¢ÁªìÊûú:");
    console.log(`   voting.getProposalResults(proposalId)`);
    console.log("========================================\n");

    // ËæìÂá∫ÂÆâÂÖ®ÁâπÊÄßËØ¥Êòé
    console.log("üîí ÂÆâÂÖ®ÁâπÊÄß (fhEVM v0.6.0):");
    console.log("========================================");
    console.log("‚ú® Ëá™Âä®ËæìÂÖ•ÈáçÊñ∞ÈöèÊú∫Âåñ");
    console.log("   - ÊâÄÊúâ FHE Êìç‰ΩúÂâçËá™Âä®ÊâßË°å");
    console.log("   - ÂØπÁî®Êà∑ÂÆåÂÖ®ÈÄèÊòé");
    console.log("");
    console.log("‚ú® sIND-CPAD ÂÆâÂÖ®ÊÄß");
    console.log("   - Èò≤Ê≠¢ÂØÜÊñáÂàÜÊûêÊîªÂáª");
    console.log("   - Ëá™Âä®Êèê‰æõ‰øùÊä§");
    console.log("");
    if (gatewayAddress !== ethers.constants.AddressZero) {
        console.log("‚ú® ÁΩëÂÖ≥È™åËØÅ‰øùÊä§");
        console.log("   - Ëß£ÂØÜËØ∑Ê±ÇÈúÄÁΩëÂÖ≥ÊâπÂáÜ");
        console.log("   - ‰ΩøÁî®Êñ∞ÁöÑ is... È™åËØÅÊ®°Âºè");
        console.log("");
    }
    console.log("‚úÖ ÊâÄÊúâÂéüÊúâ FHE ÂäüËÉΩ‰øùÊåÅ‰∏çÂèò");
    console.log("========================================\n");

    console.log("üéâ ÈÉ®ÁΩ≤ÊàêÂäüÔºÅ\n");

    return voting.address;
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:");
        console.error(error);
        process.exit(1);
    });
