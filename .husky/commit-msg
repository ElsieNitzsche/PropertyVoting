#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Commit message format validation
# Format: <type>(<scope>): <subject>
# Example: feat(voting): add proposal creation feature

commit_msg_file=$1
commit_msg=$(cat "$commit_msg_file")

# Allowed types
types="feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|security"

# Regex pattern
pattern="^($types)(\(.+\))?: .{1,100}$"

if ! echo "$commit_msg" | grep -qE "$pattern"; then
  echo "❌ Invalid commit message format!"
  echo ""
  echo "Commit message must follow format:"
  echo "  <type>(<scope>): <subject>"
  echo ""
  echo "Types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert, security"
  echo ""
  echo "Examples:"
  echo "  feat(voting): add anonymous voting feature"
  echo "  fix(security): patch XSS vulnerability"
  echo "  docs(readme): update installation instructions"
  echo "  perf(gas): optimize storage access patterns"
  echo ""
  exit 1
fi

# Check for WIP commits
if echo "$commit_msg" | grep -qiE "^(wip|WIP|work in progress)"; then
  echo "⚠️  Warning: WIP commit detected. Consider finishing before pushing."
fi

# Check for TODO/FIXME in commit message
if echo "$commit_msg" | grep -qE "TODO|FIXME"; then
  echo "⚠️  Warning: TODO/FIXME in commit message. Track in issue tracker instead."
fi

echo "✅ Commit message format validated!"
